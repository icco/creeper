<html>
  <head>
    <title>Creepermon</title>
    <link rel="stylesheet" href="https://npmcdn.com/tachyons@4.0.0-beta.12/css/tachyons.min.css">

    <script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script src="https://cdn.jsdelivr.net/keen.js/3.4.0/keen.min.js" type="text/javascript"></script>
  </head>
  <body>
    <h1>Creepermon</h1>

    <p>Creepermon is currently a site monitoring <a href="https://twitter.com/icco">@icco</a>'s web stuff. But, he's working on turning it into a library that anyone can use. You can check out the code <a href="https://github.com/icco/creepermon">on github</a>.

    <div id=""> </div>

    <script>
      var client = new Keen({
        projectId: "<%= @keen_project_id %>",
        readKey: "<%= @keen_read_key %>"
      });

      Keen.ready(function() {
        histogram('dom-element-id', {
          segment_length: 60,  // In seconds
          data_points: 10,  // i.e. There will be 10 bars on our chart
          analysis_type: 'count',
          query_parameters: {
            event_collection: 'session_end',
            timeframe: timeframe,
            filters: []
          }
        });
      });

      var timeframe = 'last_7_days';
      var colors = [
        "#56c5d1" // Add colors as desired.
      ];

      var histogram = function(selector, options) {
        if (!options) {
          options = {};
        }

        var config = {
          segment_length: options.segment_length || 20,
          data_points: options.data_points || 10
        };

        var queries = [];

        for (var i = 0; i < options.data_points; i++) {
          (function(index) {
            var start_time = index * config.segment_length;
            var end_time = start_time + config.segment_length;
            var clone = JSON.parse(JSON.stringify(options.query_parameters));
            var q = new Keen.Query(options.analysis_type, clone);

            // Each data bucket contains values that are greater that or equal
            // (`gte`) to our starting value and less than (`lt`) our ending
            // value. Because we're using index positions to define `start_time`
            // and `end_time`, our buckets would look like 0-19, 20-39, 40-59,
            // and so on.
            q.params.filters.push({
              'property_name': 'session.age',  // In seconds
              'operator': 'gte',
              'property_value': Number(start_time)
            }, {
              'property_name': 'session.age',
              'operator': 'lt',
              'property_value': Number(end_time)
            });
            queries.push(q);
          })(i);
        }

        client.run(queries, function(err, response) {
          var histogramData = [{ keys: 'Chart Title', values: [] }];
          var sum = 0;

          // Sum so we can calculate percentages
          Keen.utils.each(response, function(record,index){
            sum += record.result;
          });

          Keen.utils.each(response, function(record, index) {
            var start_time = index * config.segment_length;
            var end_time = start_time + config.segment_length;
            histogramData[0].values.push({
              'label' : start_time,
              'value' : record.result / sum  // Calculate percentage
            });
          });

          nv.addGraph(function() {
            var chart = nv.models.discreteBarChart()
              .margin({ top: 10, right: 0, bottom: 20, left: 50 })
              .color([colors[0]])
              .x(function(d) { return d.label; })
              .y(function(d) { return d.value; })
              .staggerLabels(false)
              .tooltips(true)
              .transitionDuration(250);

            chart.yAxis.tickFormat(d3.format('.1%'));

            d3.select('#' + selector + ' svg.chart')
              .datum(histogramData)
              .call(chart);

            nv.utils.windowResize(chart.update);

            return chart;
          });
        });
      };
    </script>
  </body>
</html>
